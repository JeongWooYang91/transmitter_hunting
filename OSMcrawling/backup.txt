#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

typedef struct {
	double x;
	double y;
} vector, point;

typedef struct signal {
	double x;
	double y;
	double vx;
	double vy;
	double d;
	double ss;
};

typedef struct line {
	double x1;
	double y1;
	double x2;
	double y2;
};

signal* init_signal(double x, double y, double vx, double vy, double ss) {
	signal *s = (signal*)malloc(sizeof(signal));
	s->x = x;
	s->y = y;
	double len = sqrt(vx*vx + vy*vy);
	s->vx = vx/len;
	s->vy = vy/len;
	s->ss = ss;

	double nx, ny, d;
	nx = -vy;
	ny = vx;
	d = -(nx*x + ny*y);

	s->d = d;
	return s;
}

signal* init_null_signal() {
	signal *s = (signal*)malloc(sizeof(signal));
	s->x = 0;
	s->y = 0;
	s->vx = 0;
	s->vy = 0;
	s->ss = 0;
	return s;
}

void signal_deepcpy(signal *a, signal *b) {
	b->x = a->x;
	b->y = a->y;
	b->vx = a->vx;
	b->vy = a->vy;
	b->ss = a->ss;
	b->d = a->d;
}

line* init_line(double x1, double y1, double x2, double y2) {
	double nx, ny, len, d;
	line *l = (line*)malloc(sizeof(line));
	l->x1 = x1;
	l->y1 = y1;
	l->x2 = x2;
	l->y2 = y2;
	return l;
}

double dist(double x1, double y1, double x2, double y2) {
	double dx = x2 - x1;
	double dy = y2 - y1;
	return sqrt(dx*dx + dy*dy);
}

void normalize(double &vx, double &vy) {
	double len = sqrt(vx*vx + vy*vy);
	vx /= len;
	vy /= len;
}

int vec_equal(double vx, double vy, double ux, double uy) {
	if (vx != 0) {
		if (vx*ux > 0) {
			return 1;
		}
	}
	else {
		if (vy != 0) {
			if (uy*vy < 0) {
				return 1;
			}
		}
	}

	return 0;
}

void signal_calc(signal *in, line *l, signal *out) {
	double Tnx = -in->vy;
	double Tny = in->vx;
	double Td = in->d;
	// p' = p1 + t(p2-p1), T(dot)p' = 0
	// t = -(T(dot)p1) / (T(dot)(p2 - p1))
	double tb = Tnx*(l->x2 - l->x1) + Tny*(l->y2 - l->y1);
	if (tb == 0.0) { // parallel
		out->ss = -1;
		return;
	}
	double t = -(Tnx*l->x1 + Tny*l->y1 + Td) / tb;
	double px, py, dx, dy, k;
	px = l->x1 + t*(l->x2 - l->x1);
	py = l->y1 + t*(l->y2 - l->y1);
	//printf("ly1 = %f, ly2 = %f\n", l->y1, l->y2);
	//printf("px = %f, py = %f\n", px, py);
	//printf("t = %f\n", t);

	dx = px - in->x;
	if (dx != 0) {
		if (dx*in->vx < 0) {
			out->ss = -1;
			return;
		}
	}
	else {
		dy = py - in->y;
		if (dy != 0) {
			if (dy*in->vy < 0) {
				out->ss = -1;
				return;
			}
		}
		else {
			out->ss = -1;
			return;
		}
	}

	double lvx = l->x2 - l->x1;
	double lvy = l->y2 - l->y1;
	normalize(lvx, lvy);
	out->x = px;
	out->y = py;
	out->vx = in->vx - 2 * (in->vx*(-lvy) + in->vy*(lvx))*(-lvy);
	out->vy = in->vy - 2 * (in->vx*(-lvy) + in->vy*(lvx))*(lvx);
	out->ss = in->ss + dist(in->x, in->y, out->x, out->y);
	out->d = -((-out->vy)*px + (out->vx)*py);
}

void prt(signal *s) {
	printf("prt: p(%4.3f, %4.3f), v(%f, %f), s(%f)\n", s->x, s->y, s->vx, s->vy, s->ss);
}

void test1() {
	signal *in = init_signal(1, 1, 1, 2, 0);
	signal *out = init_null_signal();
	line *l = init_line(4, 4, 2, 6);

	signal_calc(in, l, out);
	prt(out);

	free(in);
	free(out);
	free(l);

	//	signal: p(3.000000, 5.000000), v(-0.894427, -0.447214), s(4.472136)
}

#define N 360
#define THRESHOLD 100.0
#define RADIUS 0.1
double PI = acos(-1.0);
double d2r(double deg) {
	return deg * PI / 180.0;
}
int main() {
	int i, j;
	line *edge[4];
	signal *sig[N], *out, *tout;
	double cx = 3, cy = 3; //accepting point
	edge[0] = init_line(0, 0, 4, 0);
	edge[1] = init_line(4, 0, 4, 4);
	edge[2] = init_line(4, 4, 0, 4);
	edge[3] = init_line(0, 4, 0, 0);

	out = init_null_signal();
	tout = init_null_signal();
	for (i = 0; i < N; i++) {
		double r = d2r(360.0 * i / (double)N);
		sig[i] = init_signal(1, 1, cos(r), sin(r), 0);
	}

	for (i = 0; i < N; i++) {
		signal *si = sig[i];

		double r = d2r(i*180.0/(double)N);
		//printf("sig[%d]: (1, 1), (%f, %f)\n", i, cos(r), sin(r));
		//prt(si);
		while (1) {
			double t = (-si->vy)*cx + (si->vx)*cy + si->d;
			if (t < 0) t *= -1;
			if (t < RADIUS && vec_equal(si->vx, si->vy, cx - si->x, cy - si->y)) {
				si->ss += dist(si->x, si->y, cx, cy);
				//printf("why break? t = %f\n", t);
				//printf("reached at deg %d!!\n", i);
				//prt(si);
				//getchar();
				break;
			}
			if (si->ss > THRESHOLD) {
				break;
			}

			tout->ss = THRESHOLD*100;
			for (int i = 0; i < 4; i++) {
				signal_calc(si, edge[i], out);
				if (out->ss > 0) {
					if (out->ss < tout->ss) {
						signal_deepcpy(out, tout);
					}
				}
			}
			signal_deepcpy(tout, si);
		}
	}

	/*
	int input = 0;
	while (input >= 0) {
		printf("input degree: ");
		scanf("%d", &input);
		printf("si[%d] = v(%f, %f): %f: ", input, sig[input]->vx, sig[input]->vy, sig[input]->ss);
		if (sig[input]->ss > TH)
			printf("X\n");
		else
			printf("O\n");
	}
	*/

	

	for (i = 0; i < 4; i++) {
		free(edge[i]);
	}
	free(out);
	free(tout);
	for (i = 0; i < N; i++) {
		free(sig[i]);
	}
}